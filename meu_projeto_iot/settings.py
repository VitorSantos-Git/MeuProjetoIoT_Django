"""
Django settings for meu_projeto_iot project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s7$bf#8@xez6$@e21bl(15nyxgffqp!hxid(xa#451@f4h7$u#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['192.168.31.80','10.123.71.216',  'localhost', '127.0.0.1'] #Adicione seu IP aqui Retirar depois dos testes


# Application definition

INSTALLED_APPS = [
    'iot_core',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Adicionar apps do django-allauth
    'django.contrib.sites', # Requerido por allauth
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Adicione provedores de OAuth que você quer usar (ex: Google, SUAP)
    'allauth.socialaccount.providers.google',
    # 'allauth.socialaccount.providers.github', # Exemplo para GitHub
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'meu_projeto_iot.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'iot_core', 'templates')],
        #'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'loaders': [ #
                'django.template.loaders.filesystem.Loader', #
                'django.template.loaders.app_directories.Loader' #
            ]
        },
    },
]

WSGI_APPLICATION = 'meu_projeto_iot.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = 'home' # Redireciona para a URL nomeada 'home' após o login
LOGOUT_REDIRECT_URL = 'home' # Garante que o logout também redirecione para 'home'

# Configurações do allauth (personalize conforme necessário)
ACCOUNT_LOGOUT_REDIRECT_URL = 'home' # O allauth usa sua própria variável para logout
ACCOUNT_AUTHENTICATION_METHOD = 'username_email' # Permite login com username ou email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'none' # 'mandatory' para exigir verificação, 'optional', 'none'
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_REQUIRED = True
SOCIALACCOUNT_QUERY_EMAIL = True # Tenta buscar o email do provedor social
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': 'SEU_CLIENT_ID_GOOGLE', # <<--- MUDE ISTO
            'secret': 'SEU_CLIENT_SECRET_GOOGLE', # <<--- MUDE ISTO
            'key': '' # Ignorar por enquanto
        },
        'SCOPE': [ # Opcional: permissões adicionais
            'profile',
            'email',
        ],
        'AUTH_PARAMS': { # Parâmetros de autenticação adicionais (ex: forçar re-aprovação)
            'access_type': 'offline',
        }
    }
}

SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    # Requerido por allauth (autenticação por username e email)
    'allauth.account.auth_backends.AuthenticationBackend',
    # Django padrão (autenticação por username)
    'django.contrib.auth.backends.ModelBackend',
)